#!/usr/bin/env python

import sys
import os
import getopt
import json
import time

import numpy as np
from scipy import sparse
from scipy.sparse import linalg


USAGE = 'selection_probablities -m /path/to/matrices.json'
EXTENDED = '''
compute the selection probablities from the Q, R, u matrices

Options
    -h, --help                      print this message
    -m, --matrices=<path>           path to matrices.json
    -o, --output=<path>             path to write output
'''


def usage(code=None):
    '''Prints the usage and exits with an error code specified by code. If
    code is not given it exits with error_codes['usage']'''
    print USAGE
    if code is None:
        print EXTENDED
    else:
        code = 0
    sys.exit(code)

def log(*msgs):
    '''Log a message to the user'''
    for msg in msgs:
        print >>sys.stderr, str(msg),
    print >>sys.stderr
    sys.stderr.flush()

def assert_file_exists(path):
    '''checks if the file exists. If it doesn't causes the program to exit.
    @param path : path to file
    @returns : the abs path to the file (an echo) [only on success]
    '''
    path = os.path.abspath(os.path.expanduser(path))
    if not os.path.exists(path):
        log('No file found. "%(path)s"' % locals())
        usage(2)
    return path

def load(path):
    print >>sys.stderr, path,
    with open(path) as f:
        j = json.load(f)
    Q = load_matrix((j['Q']['Rows'], j['Q']['Cols']), j['Q']['Entries'])
    R = load_matrix((j['R']['Rows'], j['R']['Cols']), j['R']['Entries'])
    u = load_matrix((j['u']['Rows'], j['u']['Cols']), j['u']['Entries'])
    return Q.tocsc(), R.tocsc(), u.tocsc()

def load_matrix(shape, entries):
    data = [float(e['Value']) for e in entries]
    rows = [float(e['Row']) for e in entries]
    cols = [float(e['Col']) for e in entries]
    return sparse.coo_matrix((data, (rows, cols)), shape)

def probability(Q, R, u):
    print >>sys.stderr, Q.shape[0],
    I = sparse.eye(Q.shape[0], format='csc')
    N = linalg.inv(I - Q)
    B = N.dot(R)
    P = u.dot(B)
    return P[0,0]

def main(argv):
    try:
        opts, args = getopt.getopt(argv, "hm:o:",
            ["help","matrices=","output="])
    except getopt.GetoptError, err:
        log(err)
        usage(1)

    matrices = None
    output = sys.stdout
    for opt, arg in opts:
        if opt in ('-h', '--help',):
            usage(0)
        elif opt in ('-m', '--matrices',):
            matrices = assert_file_exists(arg)
        elif opt in ('-o', '--output',):
            output = open(os.path.abspath(arg), 'w')
        else:
            log("unexpected option", opt, arg)
            usage(1)

    if matrices is None:
        log("must supply at least a path to the matrices.json")
        usage(1)

    s = time.time()
    with output as f:
        print >>f, probability(*load(matrices))
    e = time.time()
    log("time", round(e-s, 3))

if __name__ == "__main__":
    main(sys.argv[1:])
