#!/usr/bin/env python

import sys
import os
import getopt
import sh
import itertools
import math

import numpy as np
from scipy import stats


USAGE = 'conditionals -s <int> -b <path>'
EXTENDED = '''
compute the conditional probability of the sample

Options
    -h, --help                      print this message
    -b, --base=<path>               base path to look for probability.pr's
    -s, --sample_size=<int>         size of the sample collected (including dups)
    -n, --output-name=<str>         default: conditional.pr
'''


def usage(code=None):
    '''Prints the usage and exits with an error code specified by code. If
    code is not given it exits with error_codes['usage']'''
    print USAGE
    if code is None:
        print EXTENDED
    else:
        code = 0
    sys.exit(code)

def log(*msgs):
    '''Log a message to the user'''
    for msg in msgs:
        print >>sys.stderr, str(msg),
    print >>sys.stderr
    sys.stderr.flush()

def assert_file_exists(path):
    '''checks if the file exists. If it doesn't causes the program to exit.
    @param path : path to file
    @returns : the abs path to the file (an echo) [only on success]
    '''
    path = os.path.abspath(os.path.expanduser(path))
    if not os.path.exists(path):
        log('No file found. "%(path)s"' % locals())
        usage(2)
    return path

def assert_dir_exists(path):
    '''checks if the dir exists. If it doesn't causes the program to exit.
    @param path : path to dir
    @returns : the abs path to the file (an echo) [only on success]
    '''
    path = os.path.abspath(os.path.expanduser(path))
    if not os.path.exists(path):
        log('No file found. "%(path)s"' % locals())
        usage(2)
    if not os.path.isdir(path):
        log('Is not a directory. "%(path)s"' % locals())
        usage(2)
    return path

def assert_int(s):
    try:
        return int(s)
    except Exception, e:
        log("error converting '%s' to int" % s)
        log(e)
        usage(2)

def assert_float(s):
    try:
        return float(s)
    except Exception, e:
        log("error converting '%s' to float" % s)
        log(e)
        usage(2)

def read_float_or_die(path):
    path = assert_file_exists(path)
    with open(path) as f:
        return assert_float(f.read().strip())

def read_int_or_die(path):
    path = assert_file_exists(path)
    with open(path) as f:
        return assert_int(f.read().strip())

def pi(pr, sample_size):
    x = ((1.0 - pr)**sample_size)
    return 1.0 - x

def pis(prs, sample_size):
    return [pi(pr, sample_size) for pr in prs]

def joint_pi(pr_i, pr_j, pi_i, pi_j, sample_size):
    return pi_i + pi_j - (1.0 - (1.0 - pr_i - pr_j)**sample_size)

def joint_pis(prs, pis, sample_size):
    return [
      [
          joint_pi(prs[i], prs[j], pis[i], pis[j], sample_size)
          for j in xrange(len(prs))
      ]
      for i in xrange(len(prs))
    ]

def main(argv):
    try:
        opts, args = getopt.getopt(argv, "hs:b:n:",
            ["help", "sample-size=", "base=", "output-name="])
    except getopt.GetoptError, err:
        log(err)
        usage(1)

    base = None
    sample_size = None
    output_name = 'conditional.pr'
    for opt, arg in opts:
        if opt in ('-h', '--help',):
            usage(0)
        elif opt in ('-s', '--sample-size',):
            sample_size = float(assert_int(arg))
        elif opt in ('-b', '--base',):
            base = assert_dir_exists(arg)
        elif opt in ('-n', '--output-name',):
            output_name = arg
        else:
            log("unexpected option", opt, arg)
            usage(1)


    if base is None:
        log("must supply base path (-b)")
        usage(1)

    pr_subpop = None
    pr_subpop_path = os.path.join(base, 'pr_subpop')
    if os.path.exists(pr_subpop_path):
        with open(pr_subpop_path) as f:
            pr_subpop = [float(line.strip()) for line in f]

    if sample_size is None and pr_subpop is None:
        log("must supply a sample size (-s) since there is no pr_subpop file.")
        usage(1)

    find = sh.Command("find")
    paths = [
        assert_file_exists(path.strip())
        for path in find(base, '-name', 'pattern.pr')
        if path.strip()
    ]
    pr_s = [read_float_or_die(path) for path in paths]

    if pr_subpop is None:
        n = float(sum(
            read_int_or_die(path.strip())
            for path in find(base, '-name', 'duplicates')
            if path.strip()
        ))
        pr_f = n/sample_size
        interval = None
        print 'pr_f', pr_f
    else:
        pr_f = np.mean(pr_subpop)
        interval = stats.norm.ppf(.95)*np.std(pr_subpop)
        print 'pr_f', pr_f
        print 'var(pr_f)', np.var(pr_subpop)
        print 'interval(pr_f)', pr_f + interval, pr_f - interval


    if pr_f > 1.0:
        print 'ERROR', 'pr_f > 1'
        sys.exit(3)

    for i, pr in enumerate(pr_s):
        if pr/pr_f > 1.0:
            print 'ERROR', 'pr_%d' % i, 'pr_%d/pr_f > 1' % i, pr/pr_f
            sys.exit(3)

    for path, pr in itertools.izip(paths, pr_s):
        dirname = os.path.dirname(path)
        condpath = os.path.join(dirname, output_name)
        print dirname, pr, pr/pr_f
        with open(condpath, 'w') as f:
            print >>f, pr/pr_f
        if interval is not None:
            ipath = os.path.join(dirname, 'conditional.interval.pr')
            with open(ipath, 'w') as f:
                print >>f, (pr/(pr_f + interval))
                print >>f, (pr/(pr_f - interval))

    print 'done computing conditional probabilities'

if __name__ == "__main__":
    main(sys.argv[1:])
